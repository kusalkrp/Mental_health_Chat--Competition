{"version":3,"file":"asgardeo-auth.production.js","sources":["../node_modules/tslib/tslib.es6.js","../src/constants/client-config.ts","../src/constants/oidc-endpoints.ts","../src/constants/custom-grant-template-tags.ts","../src/constants/data.ts","../src/constants/parameters.ts","../src/constants/scopes.ts","../src/constants/fetch.ts","../src/exception/exception.ts","../src/utils/authentication-utils.ts","../src/helpers/authentication-helper.ts","../src/helpers/crypto-helper.ts","../src/core/authentication-core.ts","../src/data/data-layer.ts","../src/client.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum ResponseMode {\n    formPost = \"form_post\",\n    query = \"query\",\n    direct = \"direct\"\n}\n","/**\n * Copyright (c) 2019, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { OIDCEndpoints } from \"../models\";\n\nexport const SERVICE_RESOURCES: OIDCEndpoints  = {\n    authorizationEndpoint: \"/oauth2/authorize\",\n    checkSessionIframe: \"/oidc/checksession\",\n    endSessionEndpoint: \"/oidc/logout\",\n    issuer: \"/oauth2/token\",\n    jwksUri: \"/oauth2/jwks\",\n    revocationEndpoint: \"/oauth2/revoke\",\n    tokenEndpoint: \"/oauth2/token\",\n    userinfoEndpoint: \"/oauth2/userinfo\"\n};\n\nexport const AUTHORIZATION_ENDPOINT: string = \"authorization_endpoint\";\nexport const TOKEN_ENDPOINT: string = \"token_endpoint\";\nexport const REVOKE_TOKEN_ENDPOINT: string = \"revocation_endpoint\";\nexport const END_SESSION_ENDPOINT: string = \"end_session_endpoint\";\nexport const JWKS_ENDPOINT: string = \"jwks_uri\";\nexport const OP_CONFIG_INITIATED: string = \"op_config_initiated\";\nexport const TENANT: string = \"tenant\";\nexport const SIGN_IN_REDIRECT_URL: string = \"sign_in_redirect_url\";\nexport const SIGN_OUT_REDIRECT_URL: string = \"sign_out_redirect_url\";\nexport const OIDC_SESSION_IFRAME_ENDPOINT: string = \"check_session_iframe\";\nexport const OPEN_ID_CONFIG: string = \"open_id_config\";\nexport const REGISTRATION_ENDPOINT: string = \"registration_endpoint\";\nexport const USERINFO_ENDPOINT: string = \"userinfo_endpoint\";\nexport const INTROSPECTION_ENDPOINT: string = \"introspection_endpoint\";\nexport const ISSUER: string = \"issuer\";\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport const TOKEN_TAG: string = \"{{token}}\";\nexport const USERNAME_TAG: string = \"{{username}}\";\nexport const SCOPE_TAG: string = \"{{scope}}\";\nexport const CLIENT_ID_TAG: string = \"{{clientID}}\";\nexport const CLIENT_SECRET_TAG: string = \"{{clientSecret}}\";\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum Stores {\n    ConfigData = \"config_data\",\n    OIDCProviderMetaData = \"oidc_provider_meta_data\",\n    SessionData = \"session_data\",\n    TemporaryData = \"temporary_data\"\n}\n\nexport const REFRESH_TOKEN_TIMER: string = \"refresh_token_timer\";\nexport const PKCE_CODE_VERIFIER: string = \"pkce_code_verifier\";\nexport const PKCE_SEPARATOR: string = \"#\";\n\nexport const SUPPORTED_SIGNATURE_ALGORITHMS: string[] = [\n    \"RS256\", \"RS512\", \"RS384\", \"PS256\"\n];\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport const AUTHORIZATION_CODE: string = \"code\";\nexport const SESSION_STATE: string = \"session_state\";\nexport const SIGN_OUT_URL: string = \"sign_out_url\";\nexport const SIGN_OUT_SUCCESS_PARAM: string = \"sign_out_success\";\nexport const STATE: string = \"state\";\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport const OIDC_SCOPE: string = \"openid\";\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum FetchCredentialTypes {\n    Include = \"include\",\n    SameOrigin = \"same-origin\",\n    Omit = \"omit\"\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport class AsgardeoAuthException {\n    public name: string;\n    public code: string | undefined;\n    public message: string;\n\n    public constructor(\n        code: string,\n        name: string,\n        message: string\n    ) {\n        this.message = message;\n        this.name = name;\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { PKCE_CODE_VERIFIER, PKCE_SEPARATOR } from \"../constants\";\nimport { DecodedIDTokenPayload } from \"../models\";\n\nexport class AuthenticationUtils {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    private constructor() {}\n\n    public static filterClaimsFromIDTokenPayload(payload: DecodedIDTokenPayload): any {\n        const optionalizedPayload: Partial<DecodedIDTokenPayload> = { ...payload };\n\n        delete optionalizedPayload?.iss;\n        delete optionalizedPayload?.aud;\n        delete optionalizedPayload?.exp;\n        delete optionalizedPayload?.iat;\n        delete optionalizedPayload?.acr;\n        delete optionalizedPayload?.amr;\n        delete optionalizedPayload?.azp;\n        delete optionalizedPayload?.auth_time;\n        delete optionalizedPayload?.nonce;\n        delete optionalizedPayload?.c_hash;\n        delete optionalizedPayload?.at_hash;\n        delete optionalizedPayload?.nbf;\n        delete optionalizedPayload?.isk;\n        delete optionalizedPayload?.sid;\n\n        const camelCasedPayload : any= {};\n\n        Object.entries(optionalizedPayload).forEach(([ key, value ]: [ key: string, value: unknown ]) => {\n            const keyParts: string[] = key.split(\"_\");\n\n            const camelCasedKey: string = keyParts\n                .map((key: string, index: number) => {\n                    if (index === 0) {\n                        return key;\n                    }\n\n                    return [ key[ 0 ].toUpperCase(), ...key.slice(1) ].join(\"\");\n                })\n                .join(\"\");\n\n            camelCasedPayload[camelCasedKey] = value;\n        });\n\n        return camelCasedPayload;\n    }\n\n    /**\n     * @deprecated since v1.0.6 and will be removed with the v2.0.0 release.\n     */\n    public static getTenantDomainFromIdTokenPayload = (\n        payload: DecodedIDTokenPayload,\n        uidSeparator: string = \"@\"\n    ): string => {\n        // Try to extract the tenant domain from the `sub` claim.\n        const uid: string = payload.sub;\n        const tokens: string[] = uid.split(uidSeparator);\n\n        // This works only when the email is used as the username\n        // and the tenant domain is appended to the`sub` attribute.\n        return tokens.length > 2 ? tokens[tokens.length - 1] : \"\";\n    };\n\n    public static getTokenRequestHeaders(): HeadersInit {\n        return {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        };\n    }\n\n    /**\n     * This generates the state param value to be sent with an authorization request.\n     *\n     * @param pkceKey - The PKCE key.\n     * @param state - The state value to be passed. (The correlation ID will be appended to this state value.)\n     *\n     * @returns The state param value.\n     */\n    public static generateStateParamForRequestCorrelation(pkceKey: string, state?: string): string {\n        const index: number = parseInt(pkceKey.split(PKCE_SEPARATOR)[1]);\n\n        return state ? `${state}_request_${index}` : `request_${index}`;\n    }\n\n    public static extractPKCEKeyFromStateParam(stateParam: string): string {\n        const index: number = parseInt(stateParam.split(\"request_\")[1]);\n\n        return `${PKCE_CODE_VERIFIER}${PKCE_SEPARATOR}${index}`;\n    }\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { CryptoHelper } from \"./crypto-helper\";\nimport {\n    AUTHORIZATION_ENDPOINT,\n    CLIENT_ID_TAG,\n    CLIENT_SECRET_TAG,\n    END_SESSION_ENDPOINT,\n    FetchCredentialTypes,\n    ISSUER,\n    JWKS_ENDPOINT,\n    OIDC_SCOPE,\n    OIDC_SESSION_IFRAME_ENDPOINT,\n    PKCE_CODE_VERIFIER,\n    PKCE_SEPARATOR,\n    REVOKE_TOKEN_ENDPOINT,\n    SCOPE_TAG,\n    SERVICE_RESOURCES,\n    TOKEN_ENDPOINT,\n    TOKEN_TAG,\n    USERINFO_ENDPOINT,\n    USERNAME_TAG\n} from \"../constants\";\nimport { DataLayer } from \"../data\";\nimport { AsgardeoAuthException } from \"../exception\";\nimport {\n    AuthClientConfig,\n    AuthenticatedUserInfo,\n    DecodedIDTokenPayload,\n    JWKInterface,\n    OIDCEndpointsInternal,\n    OIDCProviderMetaData,\n    RawTokenResponse,\n    SessionData,\n    StrictAuthClientConfig,\n    TemporaryData,\n    TokenResponse\n} from \"../models\";\nimport { AuthenticationUtils } from \"../utils\";\n\nexport class AuthenticationHelper<T> {\n    private _dataLayer: DataLayer<T>;\n    private _config: () => Promise<AuthClientConfig>;\n    private _oidcProviderMetaData: () => Promise<OIDCProviderMetaData>;\n    private _cryptoHelper: CryptoHelper;\n\n    public constructor(dataLayer: DataLayer<T>, cryptoHelper: CryptoHelper) {\n        this._dataLayer = dataLayer;\n        this._config = async () => await this._dataLayer.getConfigData();\n        this._oidcProviderMetaData = async () => await this._dataLayer.getOIDCProviderMetaData();\n        this._cryptoHelper = cryptoHelper;\n    }\n\n    public async resolveEndpoints(response: OIDCProviderMetaData): Promise<OIDCProviderMetaData> {\n        const oidcProviderMetaData: OIDCProviderMetaData = {};\n        const configData: StrictAuthClientConfig = await this._config();\n\n        configData.endpoints &&\n            Object.keys(configData.endpoints).forEach((endpointName: string) => {\n                const snakeCasedName: string = endpointName\n                    .replace(/[A-Z]/g, (letter: string) => `_${ letter.toLowerCase() }`);\n\n                oidcProviderMetaData[ snakeCasedName ] = configData?.endpoints\n                    ? configData.endpoints[ endpointName ]\n                    : \"\";\n            });\n\n        return { ...response, ...oidcProviderMetaData };\n    }\n\n    public async resolveEndpointsExplicitly(): Promise<OIDCEndpointsInternal> {\n        const oidcProviderMetaData: OIDCProviderMetaData = {};\n        const configData: StrictAuthClientConfig = await this._config();\n\n        const requiredEndpoints: string[] = [\n            AUTHORIZATION_ENDPOINT,\n            END_SESSION_ENDPOINT,\n            JWKS_ENDPOINT,\n            OIDC_SESSION_IFRAME_ENDPOINT,\n            REVOKE_TOKEN_ENDPOINT,\n            TOKEN_ENDPOINT,\n            ISSUER,\n            USERINFO_ENDPOINT\n        ];\n\n        const isRequiredEndpointsContains: boolean = configData.endpoints\n            ? requiredEndpoints.every((reqEndpointName: string) => {\n                return configData.endpoints\n                    ? Object.keys(configData.endpoints).some((endpointName: string) => {\n                        const snakeCasedName: string = endpointName.replace(\n                            /[A-Z]/g,\n                            (letter: string) => `_${ letter.toLowerCase() }`\n                        );\n\n                        return snakeCasedName === reqEndpointName;\n                    })\n                    : false;\n            })\n            : false;\n\n        if (!isRequiredEndpointsContains) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_HELPER-REE-NF01\",\n                \"Required endpoints missing\",\n                \"Some or all of the required endpoints are missing in the object passed to the `endpoints` \" +\n                \"attribute of the`AuthConfig` object.\"\n            );\n        }\n\n        configData.endpoints &&\n            Object.keys(configData.endpoints).forEach((endpointName: string) => {\n                const snakeCasedName: string = endpointName\n                    .replace(/[A-Z]/g, (letter: string) => `_${ letter.toLowerCase() }`);\n\n                oidcProviderMetaData[ snakeCasedName ] = configData?.endpoints\n                    ? configData.endpoints[ endpointName ]\n                    : \"\";\n            });\n\n        return { ...oidcProviderMetaData };\n    }\n\n    public async resolveEndpointsByBaseURL(): Promise<OIDCEndpointsInternal> {\n        const oidcProviderMetaData: OIDCEndpointsInternal = {};\n        const configData: StrictAuthClientConfig = await this._config();\n\n        const baseUrl: string = (configData as any).baseUrl;\n\n        if (!baseUrl) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_HELPER_REBO-NF01\",\n                \"Base URL not defined.\",\n                \"Base URL is not defined in AuthClient config.\"\n            );\n        }\n\n        configData.endpoints &&\n            Object.keys(configData.endpoints).forEach((endpointName: string) => {\n                const snakeCasedName: string = endpointName\n                    .replace(/[A-Z]/g, (letter: string) => `_${ letter.toLowerCase() }`);\n\n                oidcProviderMetaData[ snakeCasedName ] = configData?.endpoints\n                    ? configData.endpoints[ endpointName ]\n                    : \"\";\n            });\n\n        const defaultEndpoints: OIDCProviderMetaData = {\n            [ AUTHORIZATION_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.authorizationEndpoint}`,\n            [ END_SESSION_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.endSessionEndpoint}`,\n            [ ISSUER ]: `${baseUrl}${SERVICE_RESOURCES.issuer}`,\n            [ JWKS_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.jwksUri}`,\n            [ OIDC_SESSION_IFRAME_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.checkSessionIframe}`,\n            [ REVOKE_TOKEN_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.revocationEndpoint}`,\n            [ TOKEN_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.tokenEndpoint}`,\n            [ USERINFO_ENDPOINT ]: `${baseUrl}${SERVICE_RESOURCES.userinfoEndpoint}`\n        };\n\n        return { ...defaultEndpoints, ...oidcProviderMetaData };\n    }\n\n    public async validateIdToken(idToken: string): Promise<boolean> {\n        const jwksEndpoint: string | undefined = (await this._dataLayer.getOIDCProviderMetaData()).jwks_uri;\n        const configData: StrictAuthClientConfig = await this._config();\n\n        if (!jwksEndpoint || jwksEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS_AUTH_HELPER-VIT-NF01\",\n                \"JWKS endpoint not found.\",\n                \"No JWKS endpoint was found in the OIDC provider meta data returned by the well-known endpoint \" +\n                \"or the JWKS endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        let response: Response;\n\n        try {\n            response = await fetch(jwksEndpoint, {\n                credentials: configData.sendCookiesInRequests\n                    ? FetchCredentialTypes.Include\n                    : FetchCredentialTypes.SameOrigin\n            });\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_HELPER-VIT-NE02\",\n                \"Request to jwks endpoint failed.\",\n                error ?? \"The request sent to get the jwks from the server failed.\"\n            );\n        }\n\n        if (response.status !== 200 || !response.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_HELPER-VIT-HE03\",\n                `Invalid response status received for jwks request (${ response.statusText }).`,\n                await response.json()\n            );\n        }\n\n        const issuer: string | undefined = (await this._oidcProviderMetaData()).issuer;\n\n        const { keys }: { keys: JWKInterface[]; } = await response.json();\n\n        const jwk: any = await this._cryptoHelper.getJWKForTheIdToken(idToken.split(\".\")[ 0 ], keys);\n\n        return this._cryptoHelper.isValidIdToken(\n            idToken,\n            jwk,\n            (await this._config()).clientID,\n            issuer ?? \"\",\n            this._cryptoHelper.decodeIDToken(idToken).sub,\n            (await this._config()).clockTolerance, \n            (await this._config()).validateIDTokenIssuer ?? true\n        );\n    }\n\n    public getAuthenticatedUserInfo(idToken: string): AuthenticatedUserInfo {\n        const payload: DecodedIDTokenPayload = this._cryptoHelper.decodeIDToken(idToken);\n        const tenantDomain: string = AuthenticationUtils.getTenantDomainFromIdTokenPayload(payload);\n        const username: string = payload?.username ?? \"\";\n        const givenName: string = payload.given_name ?? \"\";\n        const familyName: string = payload.family_name ?? \"\";\n        const fullName: string =\n            givenName && familyName\n                ? `${ givenName } ${ familyName }`\n                : givenName\n                    ? givenName\n                    : familyName\n                        ? familyName\n                        : \"\";\n        const displayName: string = payload.preferred_username ?? fullName;\n\n        return {\n            displayName: displayName,\n            tenantDomain,\n            username: username,\n            ...AuthenticationUtils.filterClaimsFromIDTokenPayload(payload)\n        };\n    }\n\n    public async replaceCustomGrantTemplateTags(text: string, userID?: string): Promise<string> {\n        let scope: string = OIDC_SCOPE;\n        const configData: StrictAuthClientConfig = await this._config();\n        const sessionData: SessionData = await this._dataLayer.getSessionData(userID);\n\n        if (configData.scope && configData.scope.length > 0) {\n            if (!configData.scope.includes(OIDC_SCOPE)) {\n                configData.scope.push(OIDC_SCOPE);\n            }\n            scope = configData.scope.join(\" \");\n        }\n\n        return text\n            .replace(TOKEN_TAG, sessionData.access_token)\n            .replace(USERNAME_TAG, this.getAuthenticatedUserInfo(sessionData.id_token).username)\n            .replace(SCOPE_TAG, scope)\n            .replace(CLIENT_ID_TAG, configData.clientID)\n            .replace(CLIENT_SECRET_TAG, configData.clientSecret ?? \"\");\n    }\n\n    public async clearUserSessionData(userID?: string): Promise<void> {\n        await this._dataLayer.removeTemporaryData(userID);\n        await this._dataLayer.removeSessionData(userID);\n    }\n\n    public async handleTokenResponse(response: Response, userID?: string): Promise<TokenResponse> {\n        if (response.status !== 200 || !response.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_HELPER-HTR-NE01\",\n                `Invalid response status received for token request (${ response.statusText }).`,\n                await response.json()\n            );\n        }\n\n        //Get the response in JSON\n        const parsedResponse: RawTokenResponse = await response.json();\n\n        parsedResponse.created_at = new Date().getTime();\n\n        if ((await this._config()).validateIDToken) {\n            return this.validateIdToken(parsedResponse.id_token).then(async () => {\n                await this._dataLayer.setSessionData(parsedResponse, userID);\n\n                const tokenResponse: TokenResponse = {\n                    accessToken: parsedResponse.access_token,\n                    createdAt: parsedResponse.created_at,\n                    expiresIn: parsedResponse.expires_in,\n                    idToken: parsedResponse.id_token,\n                    refreshToken: parsedResponse.refresh_token,\n                    scope: parsedResponse.scope,\n                    tokenType: parsedResponse.token_type\n                };\n\n                return Promise.resolve(tokenResponse);\n            });\n        } else {\n            const tokenResponse: TokenResponse = {\n                accessToken: parsedResponse.access_token,\n                createdAt: parsedResponse.created_at,\n                expiresIn: parsedResponse.expires_in,\n                idToken: parsedResponse.id_token,\n                refreshToken: parsedResponse.refresh_token,\n                scope: parsedResponse.scope,\n                tokenType: parsedResponse.token_type\n            };\n\n            await this._dataLayer.setSessionData(parsedResponse, userID);\n\n            return Promise.resolve(tokenResponse);\n        }\n    }\n\n    /**\n     * This generates a PKCE key with the right index value.\n     *\n     * @param userID - The userID to identify a user in a multi-user scenario.\n     *\n     * @returns The PKCE key.\n     */\n    public async generatePKCEKey(userID?: string): Promise<string> {\n        const tempData: TemporaryData = await this._dataLayer.getTemporaryData(userID);\n        const keys: string[] = [];\n\n        Object.keys(tempData).forEach((key: string) => {\n            if (key.startsWith(PKCE_CODE_VERIFIER)) {\n                keys.push(key);\n            }\n        });\n\n        const lastKey: string | undefined = keys.sort().pop();\n        const index: number = parseInt(lastKey?.split(PKCE_SEPARATOR)[ 1 ] ?? \"-1\");\n\n        return `${ PKCE_CODE_VERIFIER }${ PKCE_SEPARATOR }${ index + 1 }`;\n    }\n}\n","/**\n * Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { SUPPORTED_SIGNATURE_ALGORITHMS } from \"../constants\";\nimport { AsgardeoAuthException } from \"../exception\";\nimport { CryptoUtils, DecodedIDTokenPayload, JWKInterface } from \"../models\";\n\nexport class CryptoHelper<T = any> {\n    private _cryptoUtils: CryptoUtils<T>;\n\n    public constructor(cryptoUtils: CryptoUtils<T>) {\n        this._cryptoUtils = cryptoUtils;\n    }\n\n    /**\n     * Generate code verifier.\n     *\n     * @returns code verifier.\n     */\n    public getCodeVerifier(): string {\n        return this._cryptoUtils.base64URLEncode(this._cryptoUtils.generateRandomBytes(32));\n    }\n\n    /**\n     * Derive code challenge from the code verifier.\n     *\n     * @param verifier - Code verifier.\n     *\n     * @returns - code challenge.\n     */\n    public getCodeChallenge(verifier: string): string {\n        return this._cryptoUtils.base64URLEncode(this._cryptoUtils.hashSha256(verifier));\n    }\n\n    /**\n     * Get JWK used for the id_token\n     *\n     * @param jwtHeader - header of the id_token.\n     * @param keys - jwks response.\n     *\n     * @returns public key.\n     *\n     * @throws\n     */\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    public getJWKForTheIdToken(jwtHeader: string, keys: JWKInterface[]): JWKInterface {\n        const headerJSON: Record<string, string> = JSON.parse(this._cryptoUtils.base64URLDecode(jwtHeader));\n\n        for (const key of keys) {\n            if (headerJSON.kid === key.kid) {\n                return key;\n            }\n        }\n\n        throw new AsgardeoAuthException(\n            \"JS-CRYPTO_UTIL-GJFTIT-IV01\",\n            \"kid not found.\",\n            \"Failed to find the 'kid' specified in the id_token. 'kid' found in the header : \" +\n            headerJSON.kid +\n            \", Expected values: \" +\n            keys.map((key: JWKInterface) => key.kid).join(\", \")\n        );\n    }\n\n    /**\n     * Verify id token.\n     *\n     * @param idToken - id_token received from the IdP.\n     * @param jwk - public key used for signing.\n     * @param clientID - app identification.\n     * @param issuer - id_token issuer.\n     * @param username - Username.\n     * @param clockTolerance - Allowed leeway for id_tokens (in seconds).\n     *\n     * @returns whether the id_token is valid.\n     *\n     * @throws\n     */\n    public isValidIdToken(\n        idToken: string,\n        jwk: JWKInterface,\n        clientID: string,\n        issuer: string,\n        username: string,\n        clockTolerance: number | undefined,\n        validateJwtIssuer: boolean | undefined\n    ): Promise<boolean> {\n        return this._cryptoUtils\n            .verifyJwt(\n                idToken, \n                jwk, \n                SUPPORTED_SIGNATURE_ALGORITHMS, \n                clientID, \n                issuer, \n                username, \n                clockTolerance, \n                validateJwtIssuer\n            )\n            .then((response: boolean) => {\n                if (response) {\n                    return Promise.resolve(true);\n                }\n\n                return Promise.reject(\n                    new AsgardeoAuthException(\n                        \"JS-CRYPTO_HELPER-IVIT-IV01\",\n                        \"Invalid ID token.\",\n                        \"ID token validation returned false\"\n                    )\n                );\n            });\n    }\n\n    /**\n     * This function decodes the payload of an id token and returns it.\n     *\n     * @param idToken - The id token to be decoded.\n     *\n     * @returns - The decoded payload of the id token.\n     *\n     * @throws\n     */\n    public decodeIDToken(idToken: string): DecodedIDTokenPayload {\n        try {\n            const utf8String: string = this._cryptoUtils.base64URLDecode(idToken.split(\".\")[ 1 ]);\n            const payload: DecodedIDTokenPayload = JSON.parse(utf8String);\n\n            return payload;\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\"JS-CRYPTO_UTIL-DIT-IV01\", \"Decoding ID token failed.\", error);\n        }\n    }\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n    AUTHORIZATION_ENDPOINT,\n    FetchCredentialTypes,\n    OIDC_SCOPE,\n    OP_CONFIG_INITIATED,\n    SESSION_STATE,\n    SIGN_OUT_SUCCESS_PARAM,\n    STATE\n} from \"../constants\";\nimport { DataLayer } from \"../data\";\nimport { AsgardeoAuthException } from \"../exception\";\nimport { AuthenticationHelper, CryptoHelper } from \"../helpers\";\nimport {\n    AuthClientConfig,\n    AuthenticatedUserInfo,\n    AuthorizationURLParams,\n    BasicUserInfo,\n    CryptoUtils,\n    CustomGrantConfig,\n    DecodedIDTokenPayload,\n    FetchRequestConfig,\n    FetchResponse,\n    OIDCEndpoints,\n    OIDCProviderMetaData,\n    SessionData,\n    StrictAuthClientConfig,\n    TokenResponse\n} from \"../models\";\nimport { AuthenticationUtils } from \"../utils\";\n\nexport class AuthenticationCore<T> {\n    private _dataLayer: DataLayer<T>;\n    private _config: () => Promise<AuthClientConfig>;\n    private _oidcProviderMetaData: () => Promise<OIDCProviderMetaData>;\n    private _authenticationHelper: AuthenticationHelper<T>;\n    private _cryptoUtils: CryptoUtils;\n    private _cryptoHelper: CryptoHelper;\n\n    public constructor(dataLayer: DataLayer<T>, cryptoUtils: CryptoUtils) {\n        this._cryptoUtils = cryptoUtils;\n        this._cryptoHelper = new CryptoHelper(cryptoUtils);\n        this._authenticationHelper = new AuthenticationHelper(dataLayer, this._cryptoHelper);\n        this._dataLayer = dataLayer;\n        this._config = async () => await this._dataLayer.getConfigData();\n        this._oidcProviderMetaData = async () => await this._dataLayer.getOIDCProviderMetaData();\n    }\n\n    public async getAuthorizationURLParams(\n        config?: AuthorizationURLParams,\n        userID?: string\n    ): Promise<Map<string, string>> {\n        const configData: StrictAuthClientConfig = await this._config();\n  \n        const authorizeRequestParams: Map<string, string> = new Map<\n        string,\n        string\n      >();\n  \n        authorizeRequestParams.set(\"response_type\", \"code\");\n        authorizeRequestParams.set(\"client_id\", configData.clientID);\n\n        let scope: string = OIDC_SCOPE;\n\n        if (configData.scope && configData.scope.length > 0) {\n            if (!configData.scope.includes(OIDC_SCOPE)) {\n                configData.scope.push(OIDC_SCOPE);\n            }\n            scope = configData.scope.join(\" \");\n        }\n\n        authorizeRequestParams.set(\"scope\", scope);\n        authorizeRequestParams.set(\"redirect_uri\", configData.signInRedirectURL);\n\n        if (configData.responseMode) {\n            authorizeRequestParams.set(\"response_mode\", configData.responseMode);\n        }\n  \n        const pkceKey: string = await this._authenticationHelper.generatePKCEKey(\n            userID\n        );\n  \n        if (configData.enablePKCE) {\n            const codeVerifier: string = this._cryptoHelper?.getCodeVerifier();\n            const codeChallenge: string =\n          this._cryptoHelper?.getCodeChallenge(codeVerifier);\n  \n            await this._dataLayer.setTemporaryDataParameter(\n                pkceKey,\n                codeVerifier,\n                userID\n            );\n            authorizeRequestParams.set(\"code_challenge_method\", \"S256\");\n            authorizeRequestParams.set(\"code_challenge\", codeChallenge);\n        }\n\n        if (configData.prompt) {\n            authorizeRequestParams.set(\"prompt\", configData.prompt);\n        }\n\n        const customParams: AuthorizationURLParams | undefined = config;\n\n        if (customParams) {\n            for (const [ key, value ] of Object.entries(customParams)) {\n                if (key != \"\" && value != \"\" && key !== STATE) {\n                    authorizeRequestParams.set(key, value.toString());\n                }\n            }\n        }\n\n        authorizeRequestParams.set(\n            STATE,\n            AuthenticationUtils.generateStateParamForRequestCorrelation(\n                pkceKey,\n                customParams ? customParams[STATE]?.toString() : \"\"\n            )\n        );\n  \n        return authorizeRequestParams;\n    }\n\n    public async getAuthorizationURL(config?: AuthorizationURLParams, userID?: string): Promise<string> {\n        const authorizeEndpoint: string = (await this._dataLayer.getOIDCProviderMetaDataParameter(\n            AUTHORIZATION_ENDPOINT as keyof OIDCProviderMetaData\n        )) as string;\n\n        if (!authorizeEndpoint || authorizeEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-GAU-NF01\",\n                \"No authorization endpoint found.\",\n                \"No authorization endpoint was found in the OIDC provider meta data from the well-known endpoint \" +\n                \"or the authorization endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        const authorizeRequest: URL = new URL(authorizeEndpoint);\n\n        const authorizeRequestParams: Map<string, string> =\n      await this.getAuthorizationURLParams(config, userID);\n\n        for (const [ key, value ] of authorizeRequestParams.entries()) {\n            authorizeRequest.searchParams.append(key, value);\n        }\n\n        return authorizeRequest.toString();\n    }\n\n    public async requestAccessToken(\n        authorizationCode: string,\n        sessionState: string,\n        state: string,\n        userID?: string\n    ): Promise<TokenResponse> {\n        const tokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).token_endpoint;\n        const configData: StrictAuthClientConfig = await this._config();\n\n        if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT1-NF01\",\n                \"Token endpoint not found.\",\n                \"No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint \" +\n                \"or the token endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        sessionState && (await this._dataLayer.setSessionDataParameter(\n            SESSION_STATE as keyof SessionData, sessionState, userID));\n\n        const body: URLSearchParams = new URLSearchParams();\n\n        body.set(\"client_id\", configData.clientID);\n\n        if (configData.clientSecret && configData.clientSecret.trim().length > 0) {\n            body.set(\"client_secret\", configData.clientSecret);\n        }\n\n        const code: string = authorizationCode;\n\n        body.set(\"code\", code);\n\n        body.set(\"grant_type\", \"authorization_code\");\n        body.set(\"redirect_uri\", configData.signInRedirectURL);\n\n        if (configData.enablePKCE) {\n            body.set(\n                \"code_verifier\", `${await this._dataLayer.getTemporaryDataParameter(\n                    AuthenticationUtils.extractPKCEKeyFromStateParam(state),\n                    userID\n                )}`\n            );\n\n            await this._dataLayer.removeTemporaryDataParameter(\n                AuthenticationUtils.extractPKCEKeyFromStateParam(state),\n                userID\n            );\n        }\n\n        let tokenResponse: Response;\n\n        try {\n            tokenResponse = await fetch(tokenEndpoint, {\n                body: body,\n                credentials: configData.sendCookiesInRequests\n                    ? FetchCredentialTypes.Include\n                    : FetchCredentialTypes.SameOrigin,\n                headers: new Headers(AuthenticationUtils.getTokenRequestHeaders()),\n                method: \"POST\"\n            });\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT1-NE02\",\n                \"Requesting access token failed\",\n                error ?? \"The request to get the access token from the server failed.\"\n            );\n        }\n\n        if (!tokenResponse.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT1-HE03\",\n                `Requesting access token failed with ${tokenResponse.statusText}`,\n                await tokenResponse.json()\n            );\n        }\n\n        return await this._authenticationHelper.handleTokenResponse(tokenResponse, userID);\n    }\n\n    public async refreshAccessToken(userID?: string): Promise<TokenResponse> {\n        const tokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).token_endpoint;\n        const configData: StrictAuthClientConfig = await this._config();\n        const sessionData: SessionData = await this._dataLayer.getSessionData(userID);\n\n        if (!sessionData.refresh_token) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT2-NF01\",\n                \"No refresh token found.\",\n                \"There was no refresh token found. Asgardeo doesn't return a \" +\n                \"refresh token if the refresh token grant is not enabled.\"\n            );\n        }\n\n        if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT2-NF02\",\n                \"No refresh token endpoint found.\",\n                \"No refresh token endpoint was in the OIDC provider meta data returned by the well-known \" +\n                \"endpoint or the refresh token endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        const body: string[] = [];\n\n        body.push(`client_id=${ configData.clientID }`);\n        body.push(`refresh_token=${ sessionData.refresh_token }`);\n        body.push(\"grant_type=refresh_token\");\n\n        if (configData.clientSecret && configData.clientSecret.trim().length > 0) {\n            body.push(`client_secret=${ configData.clientSecret }`);\n        }\n\n        let tokenResponse: Response;\n\n        try {\n            tokenResponse = await fetch(tokenEndpoint, {\n                body: body.join(\"&\"),\n                credentials: configData.sendCookiesInRequests\n                    ? FetchCredentialTypes.Include\n                    : FetchCredentialTypes.SameOrigin,\n                headers: new Headers(AuthenticationUtils.getTokenRequestHeaders()),\n                method: \"POST\"\n            });\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT2-NR03\",\n                \"Refresh access token request failed.\",\n                error ?? \"The request to refresh the access token failed.\"\n            );\n        }\n\n        if (!tokenResponse.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT2-HE04\",\n                `Refreshing access token failed with ${tokenResponse.statusText}`,\n                await tokenResponse.json()\n            );\n        }\n\n        return this._authenticationHelper.handleTokenResponse(tokenResponse, userID);\n    }\n\n    public async revokeAccessToken(userID?: string): Promise<FetchResponse> {\n        const revokeTokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).revocation_endpoint;\n        const configData: StrictAuthClientConfig = await this._config();\n\n        if (!revokeTokenEndpoint || revokeTokenEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT3-NF01\",\n                \"No revoke access token endpoint found.\",\n                \"No revoke access token endpoint was found in the OIDC provider meta data returned by \" +\n                \"the well-known endpoint or the revoke access token endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        const body: string[] = [];\n\n        body.push(`client_id=${ configData.clientID }`);\n        body.push(`token=${ (await this._dataLayer.getSessionData(userID)).access_token }`);\n        body.push(\"token_type_hint=access_token\");\n\n        let response: Response;\n\n        try {\n            response = await fetch(revokeTokenEndpoint, {\n                body: body.join(\"&\"),\n                credentials: configData.sendCookiesInRequests\n                    ? FetchCredentialTypes.Include\n                    : FetchCredentialTypes.SameOrigin,\n                headers: new Headers(AuthenticationUtils.getTokenRequestHeaders()),\n                method: \"POST\"\n            });\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT3-NE02\",\n                \"The request to revoke access token failed.\",\n                error ?? \"The request sent to revoke the access token failed.\"\n            );\n        }\n\n        if (response.status !== 200 || !response.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RAT3-HE03\",\n                `Invalid response status received for revoke access token request (${response.statusText}).`,\n                await response.json()\n            );\n        }\n\n        this._authenticationHelper.clearUserSessionData(userID);\n\n        return Promise.resolve(response);\n    }\n\n    public async requestCustomGrant(\n        customGrantParams: CustomGrantConfig,\n        userID?: string\n    ): Promise<TokenResponse | FetchResponse> {\n        const oidcProviderMetadata: OIDCProviderMetaData = await this._oidcProviderMetaData();\n        const configData: StrictAuthClientConfig = await this._config();\n\n        let tokenEndpoint: string | undefined;\n\n        if (customGrantParams.tokenEndpoint && customGrantParams.tokenEndpoint.trim().length !== 0) {\n            tokenEndpoint = customGrantParams.tokenEndpoint;\n        } else {\n            tokenEndpoint = oidcProviderMetadata.token_endpoint;\n        }\n\n        if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RCG-NF01\",\n                \"Token endpoint not found.\",\n                \"No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint \" +\n                \"or the token endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        const data: string[] = await Promise.all(\n            Object.entries(customGrantParams.data).map(async ([ key, value ]: [ key: string, value: any ]) => {\n                const newValue: string = await this._authenticationHelper.replaceCustomGrantTemplateTags(\n                    value as string,\n                    userID\n                );\n\n                return `${ key }=${ newValue }`;\n            })\n        );\n\n        let requestHeaders: Record<string, any> = {\n            ...AuthenticationUtils.getTokenRequestHeaders()\n        };\n\n        if (customGrantParams.attachToken) {\n            requestHeaders = {\n                ...requestHeaders,\n                Authorization: `Bearer ${ (await this._dataLayer.getSessionData(userID)).access_token }`\n            };\n        }\n\n        const requestConfig: FetchRequestConfig = {\n            body: data.join(\"&\"),\n            credentials: configData.sendCookiesInRequests\n                ? FetchCredentialTypes.Include\n                : FetchCredentialTypes.SameOrigin,\n            headers: new Headers(requestHeaders),\n            method: \"POST\"\n        };\n\n        let response: Response;\n\n        try {\n            response = await fetch(tokenEndpoint, requestConfig);\n        } catch (error: any) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RCG-NE02\",\n                \"The custom grant request failed.\",\n                error ?? \"The request sent to get the custom grant failed.\"\n            );\n        }\n\n        if (response.status !== 200 || !response.ok) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-RCG-HE03\",\n                `Invalid response status received for the custom grant request. (${response.statusText})`,\n                await response.json()\n            );\n        }\n\n        if (customGrantParams.returnsSession) {\n            return this._authenticationHelper.handleTokenResponse(response, userID);\n        } else {\n            return Promise.resolve(await response.json());\n        }\n    }\n\n    public async getBasicUserInfo(userID?: string): Promise<BasicUserInfo> {\n        const sessionData: SessionData = await this._dataLayer.getSessionData(userID);\n        const authenticatedUser: AuthenticatedUserInfo = this._authenticationHelper\n            .getAuthenticatedUserInfo(sessionData?.id_token);\n\n        let basicUserInfo: BasicUserInfo = {\n            allowedScopes: sessionData.scope,\n            sessionState: sessionData.session_state\n        };\n\n        Object.keys(authenticatedUser).forEach((key: string) => {\n            if (\n                authenticatedUser[ key ] === undefined ||\n                authenticatedUser[ key ] === \"\" ||\n                authenticatedUser[ key ] === null\n            ) {\n                delete authenticatedUser[ key ];\n            }\n        });\n\n        basicUserInfo = { ...basicUserInfo, ...authenticatedUser };\n\n        return basicUserInfo;\n    }\n\n    public async getDecodedIDToken(userID?: string): Promise<DecodedIDTokenPayload> {\n        const idToken: string = (await this._dataLayer.getSessionData(userID)).id_token;\n        const payload: DecodedIDTokenPayload = this._cryptoHelper.decodeIDToken(idToken);\n\n        return payload;\n    }\n\n    public async getCryptoHelper(): Promise<CryptoHelper> {\n        return this._cryptoHelper;\n    }\n\n    public async getIDToken(userID?: string): Promise<string> {\n        return (await this._dataLayer.getSessionData(userID)).id_token;\n    }\n\n    public async getOIDCProviderMetaData(forceInit: boolean): Promise<void> {\n        const configData: StrictAuthClientConfig = await this._config();\n\n        if (!forceInit && (await this._dataLayer.getTemporaryDataParameter(OP_CONFIG_INITIATED))) {\n            return Promise.resolve();\n        }\n\n        const wellKnownEndpoint: string = (configData as any).wellKnownEndpoint;\n\n        if (wellKnownEndpoint) {\n\n            let response: Response;\n\n            try {\n                response = await fetch(wellKnownEndpoint);\n                if (response.status !== 200 || !response.ok) {\n                    throw new Error();\n                }\n            } catch {\n                throw new AsgardeoAuthException(\n                    \"JS-AUTH_CORE-GOPMD-HE01\",\n                    \"Invalid well-known response\",\n                    \"The well known endpoint response has been failed with an error.\"\n                );\n            }\n\n            await this._dataLayer.setOIDCProviderMetaData(\n                await this._authenticationHelper.resolveEndpoints(await response.json())\n            );\n            await this._dataLayer.setTemporaryDataParameter(OP_CONFIG_INITIATED, true);\n\n            return Promise.resolve();\n        } else if ((configData as any).baseUrl) {\n            try {\n                await this._dataLayer.setOIDCProviderMetaData(\n                    await this._authenticationHelper.resolveEndpointsByBaseURL());\n            } catch (error: any) {\n                throw new AsgardeoAuthException(\n                    \"JS-AUTH_CORE-GOPMD-IV02\",\n                    \"Resolving endpoints failed.\",\n                    error ?? \"Resolving endpoints by base url failed.\"\n                );\n            }\n            await this._dataLayer.setTemporaryDataParameter(OP_CONFIG_INITIATED, true);\n\n            return Promise.resolve();\n        }  else {\n            await this._dataLayer.setOIDCProviderMetaData(\n                await this._authenticationHelper.resolveEndpointsExplicitly());\n\n            await this._dataLayer.setTemporaryDataParameter(OP_CONFIG_INITIATED, true);\n\n            return Promise.resolve();\n        }\n    }\n\n    public async getOIDCServiceEndpoints(): Promise<OIDCEndpoints> {\n        const oidcProviderMetaData: OIDCProviderMetaData = await this._oidcProviderMetaData();\n\n        return {\n            authorizationEndpoint: oidcProviderMetaData.authorization_endpoint ?? \"\",\n            checkSessionIframe: oidcProviderMetaData.check_session_iframe ?? \"\",\n            endSessionEndpoint: oidcProviderMetaData.end_session_endpoint ?? \"\",\n            introspectionEndpoint: oidcProviderMetaData.introspection_endpoint ?? \"\",\n            issuer: oidcProviderMetaData.issuer ?? \"\",\n            jwksUri: oidcProviderMetaData.jwks_uri ?? \"\",\n            registrationEndpoint: oidcProviderMetaData.registration_endpoint ?? \"\",\n            revocationEndpoint: oidcProviderMetaData.revocation_endpoint ?? \"\",\n            tokenEndpoint: oidcProviderMetaData.token_endpoint ?? \"\",\n            userinfoEndpoint: oidcProviderMetaData.userinfo_endpoint ?? \"\"\n        };\n    }\n\n    public async getSignOutURL(userID?: string): Promise<string> {\n        const logoutEndpoint: string | undefined = (await this._oidcProviderMetaData())?.end_session_endpoint;\n        const configData: StrictAuthClientConfig = await this._config();\n\n        if (!logoutEndpoint || logoutEndpoint.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-GSOU-NF01\",\n                \"Sign-out endpoint not found.\",\n                \"No sign-out endpoint was found in the OIDC provider meta data returned by the well-known endpoint \" +\n                \"or the sign-out endpoint passed to the SDK is empty.\"\n            );\n        }\n\n        const callbackURL: string = configData?.signOutRedirectURL ?? configData?.signInRedirectURL;\n\n        if (!callbackURL || callbackURL.trim().length === 0) {\n            throw new AsgardeoAuthException(\n                \"JS-AUTH_CORE-GSOU-NF03\",\n                \"No sign-out redirect URL found.\",\n                \"The sign-out redirect URL cannot be found or the URL passed to the SDK is empty. \" +\n                \"No sign-in redirect URL has been found either. \"\n            );\n        }\n        const queryParams: URLSearchParams = new URLSearchParams();\n\n        queryParams.set(\"post_logout_redirect_uri\", callbackURL);\n\n        if (configData.sendIdTokenInLogoutRequest) {\n            const idToken: string = (await this._dataLayer.getSessionData(userID))?.id_token;\n\n            if (!idToken || idToken.trim().length === 0) {\n                throw new AsgardeoAuthException(\n                    \"JS-AUTH_CORE-GSOU-NF02\",\n                    \"ID token not found.\",\n                    \"No ID token could be found. Either the session information is lost or you have not signed in.\"\n                );\n            }\n            queryParams.set(\"id_token_hint\", idToken);\n        } else {\n            queryParams.set(\"client_id\", configData.clientID);\n        }\n\n        queryParams.set(\"state\", SIGN_OUT_SUCCESS_PARAM);\n\n        return `${logoutEndpoint}?${queryParams.toString()}`;\n    }\n\n    public async clearUserSessionData(userID?: string): Promise<void> {\n        await this._authenticationHelper.clearUserSessionData(userID);\n    }\n\n    public async getAccessToken(userID?: string): Promise<string> {\n        return (await this._dataLayer.getSessionData(userID))?.access_token;\n    }\n\n    /**\n     * The created timestamp of the token response in milliseconds.\n     * \n     * @param userID - User ID\n     * @returns Created at timestamp of the token response in milliseconds.\n     */\n    public async getCreatedAt(userID?: string): Promise<number> {\n        return (await this._dataLayer.getSessionData(userID))?.created_at;\n    }\n\n    /**\n     * The expires timestamp of the token response in seconds.\n     * \n     * @param userID - User ID\n     * @returns Expires in timestamp of the token response in seconds.\n     */\n    public async getExpiresIn(userID?: string): Promise<string> {\n        return (await this._dataLayer.getSessionData(userID))?.expires_in;\n    }\n\n    public async isAuthenticated(userID?: string): Promise<boolean> {\n        const isAccessTokenAvailable: boolean = Boolean(await this.getAccessToken(userID));\n\n        // Check if the access token is expired.\n        const createdAt: number = await this.getCreatedAt(userID);\n\n        // Get the expires in value.\n        const expiresInString: string = await this.getExpiresIn(userID);\n\n        // If the expires in value is not available, the token is invalid and the user is not authenticated.\n        if (!expiresInString) {\n            return false;\n        }\n\n        // Convert to milliseconds.\n        const expiresIn: number = parseInt(expiresInString) * 1000;\n        const currentTime: number = new Date().getTime();\n        const isAccessTokenValid: boolean = (createdAt + expiresIn) > currentTime;\n\n        const isAuthenticated: boolean = isAccessTokenAvailable && isAccessTokenValid;\n\n        return isAuthenticated;\n    }\n\n    public async getPKCECode(state: string, userID?: string): Promise<string> {\n        return (await this._dataLayer.getTemporaryDataParameter(\n            AuthenticationUtils.extractPKCEKeyFromStateParam(state),\n            userID\n        )) as string;\n    }\n\n    public async setPKCECode(pkce: string, state: string, userID?: string): Promise<void> {\n        return await this._dataLayer.setTemporaryDataParameter(\n            AuthenticationUtils.extractPKCEKeyFromStateParam(state),\n            pkce,\n            userID\n        );\n    }\n\n    public async updateConfig(config: Partial<AuthClientConfig<T>>): Promise<void> {\n        await this._dataLayer.setConfigData(config);\n        await this.getOIDCProviderMetaData(true);\n    }\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Stores } from \"../constants\";\nimport { AuthClientConfig, OIDCProviderMetaData, SessionData, Store, StoreValue, TemporaryData } from \"../models\";\n\ntype PartialData<T> = Partial<AuthClientConfig<T> | OIDCProviderMetaData | SessionData | TemporaryData>;\n\nexport const ASGARDEO_SESSION_ACTIVE: string = \"asgardeo-session-active\";\n\nexport class DataLayer<T> {\n    protected _id: string;\n    protected _store: Store;\n    public constructor(instanceID: string, store: Store) {\n        this._id = instanceID;\n        this._store = store;\n    }\n\n    protected async setDataInBulk(\n        key: string,\n        data: PartialData<T>\n    ): Promise<void> {\n        const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n        const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n        const dataToBeSaved: PartialData<T> = { ...existingData, ...data };\n        const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n        await this._store.setData(key, dataToBeSavedJSON);\n    }\n\n    protected async setValue(\n        key: string,\n        attribute: keyof AuthClientConfig<T> | keyof OIDCProviderMetaData | keyof SessionData | keyof TemporaryData,\n        value: StoreValue\n    ): Promise<void> {\n        const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n        const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n        const dataToBeSaved: PartialData<T> = { ...existingData, [ attribute ]: value };\n        const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n        await this._store.setData(key, dataToBeSavedJSON);\n    }\n\n    protected async removeValue(\n        key: string,\n        attribute: (keyof AuthClientConfig<T> | keyof OIDCProviderMetaData | keyof SessionData | keyof TemporaryData)\n    ): Promise<void> {\n        const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n        const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n        const dataToBeSaved: PartialData<T> = { ...existingData };\n\n        delete dataToBeSaved[ attribute as string ];\n\n        const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n        await this._store.setData(key, dataToBeSavedJSON);\n    }\n\n    protected _resolveKey(store: Stores | string, userID?: string): string {\n        return userID ? `${ store }-${ this._id }-${ userID }` : `${ store }-${ this._id }`;\n    }\n\n    protected isLocalStorageAvailable(): boolean {\n        try {\n            const testValue: string = \"__ASGARDEO_AUTH_CORE_LOCAL_STORAGE_TEST__\";\n\n            localStorage.setItem(testValue, testValue);\n            localStorage.removeItem(testValue);\n\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    public async setConfigData(config: Partial<AuthClientConfig<T>>): Promise<void> {\n        await this.setDataInBulk(this._resolveKey(Stores.ConfigData), config);\n    }\n\n    public async setOIDCProviderMetaData(oidcProviderMetaData: Partial<OIDCProviderMetaData>): Promise<void> {\n        this.setDataInBulk(this._resolveKey(Stores.OIDCProviderMetaData), oidcProviderMetaData);\n    }\n\n    public async setTemporaryData(temporaryData: Partial<TemporaryData>, userID?: string): Promise<void> {\n        this.setDataInBulk(this._resolveKey(Stores.TemporaryData, userID), temporaryData);\n    }\n\n    public async setSessionData(sessionData: Partial<SessionData>, userID?: string): Promise<void> {\n        this.setDataInBulk(this._resolveKey(Stores.SessionData, userID), sessionData);\n    }\n\n    public async setCustomData<K>(key: string, customData: Partial<K>, userID?: string): Promise<void> {\n        this.setDataInBulk(this._resolveKey(key, userID), customData);\n    }\n\n    public async getConfigData(): Promise<AuthClientConfig<T>> {\n        return JSON.parse((await this._store.getData(this._resolveKey(Stores.ConfigData))) ?? null);\n    }\n\n    public async getOIDCProviderMetaData(): Promise<OIDCProviderMetaData> {\n        return JSON.parse((await this._store.getData(this._resolveKey(Stores.OIDCProviderMetaData))) ?? null);\n    }\n\n    public async getTemporaryData(userID?: string): Promise<TemporaryData> {\n        return JSON.parse((await this._store.getData(this._resolveKey(Stores.TemporaryData, userID))) ?? null);\n    }\n\n    public async getSessionData(userID?: string): Promise<SessionData> {\n        return JSON.parse((await this._store.getData(this._resolveKey(Stores.SessionData, userID))) ?? null);\n    }\n\n    public async getCustomData<K>(key: string, userID?: string): Promise<K> {\n        return JSON.parse((await this._store.getData(this._resolveKey(key, userID))) ?? null);\n    }\n\n    public setSessionStatus(status: string): void {\n        // Using local storage to store the session status as it is required to be available across tabs.\n        this.isLocalStorageAvailable() && localStorage.setItem(`${ASGARDEO_SESSION_ACTIVE}`, status);\n    }\n\n    public getSessionStatus(): string {\n        return this.isLocalStorageAvailable() \n            ? localStorage.getItem(`${ASGARDEO_SESSION_ACTIVE}`) ?? \"\"\n            : \"\";\n    }\n\n    public removeSessionStatus(): void {\n        this.isLocalStorageAvailable() && localStorage.removeItem(`${ASGARDEO_SESSION_ACTIVE}`);\n    }\n\n    public async removeConfigData(): Promise<void> {\n        await this._store.removeData(this._resolveKey(Stores.ConfigData));\n    }\n\n    public async removeOIDCProviderMetaData(): Promise<void> {\n        await this._store.removeData(this._resolveKey(Stores.OIDCProviderMetaData));\n    }\n\n    public async removeTemporaryData(userID?: string): Promise<void> {\n        await this._store.removeData(this._resolveKey(Stores.TemporaryData, userID));\n    }\n\n    public async removeSessionData(userID?: string): Promise<void> {\n        await this._store.removeData(this._resolveKey(Stores.SessionData, userID));\n    }\n\n    public async getConfigDataParameter(key: keyof AuthClientConfig<T>): Promise<StoreValue> {\n        const data: string = await this._store.getData(this._resolveKey(Stores.ConfigData));\n\n        return data && JSON.parse(data)[ key ];\n    }\n\n    public async getOIDCProviderMetaDataParameter(key: keyof OIDCProviderMetaData): Promise<StoreValue> {\n        const data: string = await this._store.getData(this._resolveKey(Stores.OIDCProviderMetaData));\n\n        return data && JSON.parse(data)[ key ];\n    }\n\n    public async getTemporaryDataParameter(key: keyof TemporaryData, userID?: string): Promise<StoreValue> {\n        const data: string = await this._store.getData(this._resolveKey(Stores.TemporaryData, userID));\n\n        return data && JSON.parse(data)[ key ];\n    }\n\n    public async getSessionDataParameter(key: keyof SessionData, userID?: string): Promise<StoreValue> {\n        const data: string = await this._store.getData(this._resolveKey(Stores.SessionData, userID));\n\n        return data && JSON.parse(data)[ key ];\n    }\n\n    public async setConfigDataParameter(key: keyof AuthClientConfig<T>, value: StoreValue): Promise<void> {\n        await this.setValue(this._resolveKey(Stores.ConfigData), key, value);\n    }\n\n    public async setOIDCProviderMetaDataParameter(key: keyof OIDCProviderMetaData, value: StoreValue): Promise<void> {\n        await this.setValue(this._resolveKey(Stores.OIDCProviderMetaData), key, value);\n    }\n\n    public async setTemporaryDataParameter(\n        key: keyof TemporaryData,\n        value: StoreValue,\n        userID?: string\n    ): Promise<void> {\n        await this.setValue(this._resolveKey(Stores.TemporaryData, userID), key, value);\n    }\n\n    public async setSessionDataParameter(key: keyof SessionData, value: StoreValue, userID?: string): Promise<void> {\n        await this.setValue(this._resolveKey(Stores.SessionData, userID), key, value);\n    }\n\n    public async removeConfigDataParameter(key: keyof AuthClientConfig<T>): Promise<void> {\n        await this.removeValue(this._resolveKey(Stores.ConfigData), key);\n    }\n\n    public async removeOIDCProviderMetaDataParameter(key: keyof OIDCProviderMetaData): Promise<void> {\n        await this.removeValue(this._resolveKey(Stores.OIDCProviderMetaData), key);\n    }\n\n    public async removeTemporaryDataParameter(key: keyof TemporaryData, userID?: string): Promise<void> {\n        await this.removeValue(this._resolveKey(Stores.TemporaryData, userID), key);\n    }\n\n    public async removeSessionDataParameter(key: keyof SessionData, userID?: string): Promise<void> {\n        await this.removeValue(this._resolveKey(Stores.SessionData, userID), key);\n    }\n}\n","/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {\n    OIDC_SCOPE,\n    OP_CONFIG_INITIATED,\n    ResponseMode,\n    SIGN_OUT_SUCCESS_PARAM,\n    STATE\n} from \"./constants\";\nimport { AuthenticationCore } from \"./core\";\nimport { DataLayer } from \"./data\";\nimport { CryptoHelper } from \"./helpers\";\nimport {\n    AuthClientConfig,\n    BasicUserInfo,\n    CryptoUtils,\n    CustomGrantConfig,\n    DecodedIDTokenPayload,\n    FetchResponse,\n    GetAuthURLConfig,\n    OIDCEndpoints,\n    Store,\n    TokenResponse\n} from \"./models\";\n\n/**\n * Default configurations.\n */\nconst DefaultConfig: Partial<AuthClientConfig<unknown>> = {\n    clockTolerance: 300,\n    enablePKCE: true,\n    responseMode: ResponseMode.query,\n    scope: [ OIDC_SCOPE ],\n    sendCookiesInRequests: true,\n    validateIDToken: true,\n    validateIDTokenIssuer: true\n};\n\n/**\n * This class provides the necessary methods needed to implement authentication.\n*/\nexport class AsgardeoAuthClient<T> {\n    private _dataLayer!: DataLayer<T>;\n    private _authenticationCore!: AuthenticationCore<T>;\n\n    private static _instanceID: number;\n    static _authenticationCore: any;\n\n    /**\n     * This is the constructor method that returns an instance of the .\n     *\n     * @param store - The store object.\n     *\n     * @example\n     * ```\n     * const _store: Store = new DataStore();\n     * const auth = new AsgardeoAuthClient<CustomClientConfig>(_store);\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#constructor}\n     *\n     * @preserve\n     */\n    public constructor() {}\n\n    /**\n     *\n     * This method initializes the SDK with the config data.\n     *\n     * @param config - The config object to initialize with.\n     *\n     * @example\n     * const config = \\{\n     *     signInRedirectURL: \"http://localhost:3000/sign-in\",\n     *     clientID: \"client ID\",\n     *     baseUrl: \"https://localhost:9443\"\n     * \\}\n     *\n     * await auth.initialize(config);\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#initialize}\n     *\n     * @preserve\n     */\n    public async initialize(\n        config: AuthClientConfig<T>,\n        store: Store,\n        cryptoUtils: CryptoUtils,\n        instanceID?: number\n    ): Promise<void> {\n        const clientId: string = config.clientID;\n\n        if (!AsgardeoAuthClient._instanceID) {\n            AsgardeoAuthClient._instanceID = 0;\n        } else {\n            AsgardeoAuthClient._instanceID += 1;\n        }\n\n        if (instanceID) {\n            AsgardeoAuthClient._instanceID = instanceID;\n        }\n\n        if (!clientId) {\n            this._dataLayer = new DataLayer<T>(`instance_${ AsgardeoAuthClient._instanceID }`, store);\n        } else {\n            this._dataLayer = new DataLayer<T>(`instance_${ AsgardeoAuthClient._instanceID }-${ clientId }`, store);\n        }\n\n        this._authenticationCore = new AuthenticationCore(this._dataLayer, cryptoUtils);\n        AsgardeoAuthClient._authenticationCore = new AuthenticationCore(this._dataLayer, cryptoUtils);\n\n        await this._dataLayer.setConfigData({\n            ...DefaultConfig,\n            ...config,\n            scope: [\n                ...(DefaultConfig.scope ?? []),\n                ...(config.scope?.filter((scope: string) => !DefaultConfig?.scope?.includes(scope)) ?? [])\n            ]\n        });\n    }\n\n    /**\n     * This method returns the `DataLayer` object that allows you to access authentication data.\n     *\n     * @returns - The `DataLayer` object.\n     *\n     * @example\n     * ```\n     * const data = auth.getDataLayer();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDataLayer}\n     *\n     * @preserve\n     */\n    public getDataLayer(): DataLayer<T> {\n        return this._dataLayer;\n    }\n\n    /**\n     * This method returns the `instanceID` variable of the given instance.\n     *\n     * @returns - The `instanceID` number.\n     *\n     * @example\n     * ```\n     * const instanceId = auth.getInstanceID();\n     * ```\n     *\n     * @preserve\n     */\n    public getInstanceID(): number {\n        return AsgardeoAuthClient._instanceID;\n    }\n\n    /**\n   * This is an async method that returns a Promise that resolves with the authorization URL parameters.\n   *\n   * @param config - (Optional) A config object to force initialization and pass\n   * custom path parameters such as the `fidp` parameter.\n   * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A promise that resolves with the authorization URL parameters.\n   *\n   * @example\n   * ```\n   * auth.getAuthorizationURLParams().then((params)=>{\n   *  // console.log(params);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAuthorizationURLParams}\n   *\n   * @preserve\n   */\n    public async getAuthorizationURLParams(\n        config?: GetAuthURLConfig,\n        userID?: string\n    ): Promise<Map<string, string>> {\n        const authRequestConfig: GetAuthURLConfig = { ...config };\n\n        delete authRequestConfig?.forceInit;\n\n        if (await this._dataLayer.getTemporaryDataParameter(OP_CONFIG_INITIATED)) {\n            return this._authenticationCore.getAuthorizationURLParams(\n                authRequestConfig,\n                userID\n            );\n        }\n\n        return this._authenticationCore\n            .getOIDCProviderMetaData(config?.forceInit as boolean)\n            .then(() => {\n                return this._authenticationCore.getAuthorizationURLParams(\n                    authRequestConfig,\n                    userID\n                );\n            });\n    }\n\n    /**\n     * This is an async method that returns a Promise that resolves with the authorization URL.\n     *\n     * @param config - (Optional) A config object to force initialization and pass\n     * custom path parameters such as the fidp parameter.\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A promise that resolves with the authorization URL.\n     *\n     * @example\n     * ```\n     * auth.getAuthorizationURL().then((url)=>{\n     *  // console.log(url);\n     * }).catch((error)=>{\n     *  // console.error(error);\n     * });\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAuthorizationURL}\n     *\n     * @preserve\n     */\n    public async getAuthorizationURL(config?: GetAuthURLConfig, userID?: string): Promise<string> {\n        const authRequestConfig: GetAuthURLConfig = { ...config };\n\n        delete authRequestConfig?.forceInit;\n\n        if (await this._dataLayer.getTemporaryDataParameter(OP_CONFIG_INITIATED)) {\n            return this._authenticationCore.getAuthorizationURL(authRequestConfig, userID);\n        }\n\n        return this._authenticationCore.getOIDCProviderMetaData(config?.forceInit as boolean).then(() => {\n            return this._authenticationCore.getAuthorizationURL(authRequestConfig, userID);\n        });\n    }\n\n    /**\n     * This is an async method that sends a request to obtain the access token and returns a Promise\n     * that resolves with the token and other relevant data.\n     *\n     * @param authorizationCode - The authorization code.\n     * @param sessionState - The session state.\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the token response.\n     *\n     * @example\n     * ```\n     * auth.requestAccessToken(authCode, sessionState).then((token)=>{\n     *  // console.log(token);\n     * }).catch((error)=>{\n     *  // console.error(error);\n     * });\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestAccessToken}\n     *\n     *\n     * @preserve\n     */\n    public async requestAccessToken(\n        authorizationCode: string,\n        sessionState: string,\n        state: string,\n        userID?: string\n    ): Promise<TokenResponse> {\n        if (await this._dataLayer.getTemporaryDataParameter(OP_CONFIG_INITIATED)) {\n            return this._authenticationCore.requestAccessToken(authorizationCode, sessionState, state, userID);\n        }\n\n        return this._authenticationCore.getOIDCProviderMetaData(false).then(() => {\n            return this._authenticationCore.requestAccessToken(authorizationCode, sessionState, state, userID);\n        });\n    }\n\n    /**\n     * This method returns the sign-out URL.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * **This doesn't clear the authentication data.**\n     *\n     * @returns - A Promise that resolves with the sign-out URL.\n     *\n     * @example\n     * ```\n     * const signOutUrl = await auth.getSignOutURL();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getSignOutURL}\n     *\n     * @preserve\n     */\n    public async getSignOutURL(userID?: string): Promise<string> {\n        return this._authenticationCore.getSignOutURL(userID);\n    }\n\n    /**\n     * This method returns OIDC service endpoints that are fetched from the `.well-known` endpoint.\n     *\n     * @returns - A Promise that resolves with an object containing the OIDC service endpoints.\n     *\n     * @example\n     * ```\n     * const endpoints = await auth.getOIDCServiceEndpoints();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getOIDCServiceEndpoints}\n     *\n     * @preserve\n     */\n    public async getOIDCServiceEndpoints(): Promise<OIDCEndpoints> {\n        return this._authenticationCore.getOIDCServiceEndpoints();\n    }\n\n    /**\n     * This method decodes the payload of the ID token and returns it.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the decoded ID token payload.\n     *\n     * @example\n     * ```\n     * const decodedIdToken = await auth.getDecodedIDToken();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDecodedIDToken}\n     *\n     * @preserve\n     */\n    public async getDecodedIDToken(userID?: string): Promise<DecodedIDTokenPayload> {\n        return this._authenticationCore.getDecodedIDToken(userID);\n    }\n\n    /**\n     * This method returns the ID token.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the ID token.\n     *\n     * @example\n     * ```\n     * const idToken = await auth.getIDToken();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIDToken}\n     *\n     * @preserve\n     */\n    public async getIDToken(userID?: string): Promise<string> {\n        return this._authenticationCore.getIDToken(userID);\n    }\n\n    /**\n     * This method returns the basic user information obtained from the ID token.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with an object containing the basic user information.\n     *\n     * @example\n     * ```\n     * const userInfo = await auth.getBasicUserInfo();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getBasicUserInfo}\n     *\n     * @preserve\n     */\n    public async getBasicUserInfo(userID?: string): Promise<BasicUserInfo> {\n        return this._authenticationCore.getBasicUserInfo(userID);\n    }\n\n    /**\n     * This method returns the crypto helper object.\n     *\n     * @returns - A Promise that resolves with a CryptoHelper object.\n     *\n     * @example\n     * ```\n     * const cryptoHelper = await auth.CryptoHelper();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getCryptoHelper}\n     *\n     * @preserve\n     */\n    public async getCryptoHelper(): Promise<CryptoHelper> {\n        return this._authenticationCore.getCryptoHelper();\n    }\n\n    /**\n     * This method revokes the access token.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * **This method also clears the authentication data.**\n     *\n     * @returns - A Promise that returns the response of the revoke-access-token request.\n     *\n     * @example\n     * ```\n     * auth.revokeAccessToken().then((response)=>{\n     *  // console.log(response);\n     * }).catch((error)=>{\n     *  // console.error(error);\n     * });\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#revokeAccessToken}\n     *\n     * @preserve\n     */\n    public revokeAccessToken(userID?: string): Promise<FetchResponse> {\n        return this._authenticationCore.revokeAccessToken(userID);\n    }\n\n    /**\n     * This method refreshes the access token and returns a Promise that resolves with the new access\n     * token and other relevant data.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the token response.\n     *\n     * @example\n     * ```\n     * auth.refreshAccessToken().then((response)=>{\n     *  // console.log(response);\n     * }).catch((error)=>{\n     *  // console.error(error);\n     * });\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#refreshAccessToken}\n     *\n     * @preserve\n     */\n    public refreshAccessToken(userID?: string): Promise<TokenResponse> {\n        return this._authenticationCore.refreshAccessToken(userID);\n    }\n\n    /**\n     * This method returns the access token.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the access token.\n     *\n     * @example\n     * ```\n     * const accessToken = await auth.getAccessToken();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAccessToken}\n     *\n     * @preserve\n     */\n    public async getAccessToken(userID?: string): Promise<string> {\n        return this._authenticationCore.getAccessToken(userID);\n    }\n\n    /**\n     * This method sends a custom-grant request and returns a Promise that resolves with the response\n     * depending on the config passed.\n     *\n     * @param config - A config object containing the custom grant configurations.\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with the response depending\n     * on your configurations.\n     *\n     * @example\n     * ```\n     * const config = {\n     *   attachToken: false,\n     *   data: {\n     *       client_id: \"{{clientID}}\",\n     *       grant_type: \"account_switch\",\n     *       scope: \"{{scope}}\",\n     *       token: \"{{token}}\",\n     *   },\n     *   id: \"account-switch\",\n     *   returnResponse: true,\n     *   returnsSession: true,\n     *   signInRequired: true\n     * }\n     *\n     * auth.requestCustomGrant(config).then((response)=>{\n     *  // console.log(response);\n     * }).catch((error)=>{\n     *  // console.error(error);\n     * });\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestCustomGrant}\n     *\n     * @preserve\n     */\n    public requestCustomGrant(config: CustomGrantConfig, userID?: string): Promise<TokenResponse | FetchResponse> {\n        return this._authenticationCore.requestCustomGrant(config, userID);\n    }\n\n    /**\n     * This method returns if the user is authenticated or not.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @returns - A Promise that resolves with `true` if the user is authenticated, `false` otherwise.\n     *\n     * @example\n     * ```\n     * await auth.isAuthenticated();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isAuthenticated}\n     *\n     * @preserve\n     */\n    public async isAuthenticated(userID?: string): Promise<boolean> {\n        return this._authenticationCore.isAuthenticated(userID);\n    }\n\n    /**\n     * This method returns the PKCE code generated during the generation of the authentication URL.\n     *\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     * @param state - The state parameter that was passed in the authentication URL.\n     *\n     * @returns - A Promise that resolves with the PKCE code.\n     *\n     * @example\n     * ```\n     * const pkce = await getPKCECode();\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getPKCECode}\n     *\n     * @preserve\n     */\n    public async getPKCECode(state: string, userID?: string): Promise<string> {\n        return this._authenticationCore.getPKCECode(state, userID);\n    }\n\n    /**\n     * This method sets the PKCE code to the data store.\n     *\n     * @param pkce - The PKCE code.\n     * @param state - The state parameter that was passed in the authentication URL.\n     * @param userID - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n     * scenarios where each user should be uniquely identified.\n     *\n     * @example\n     * ```\n     * await auth.setPKCECode(\"pkce_code\")\n     * ```\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#setPKCECode}\n     *\n     * @preserve\n     */\n    public async setPKCECode(pkce: string, state: string, userID?: string): Promise<void> {\n        await this._authenticationCore.setPKCECode(pkce, state, userID);\n    }\n\n    /**\n     * This method returns if the sign-out is successful or not.\n     *\n     * @param signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.\n     *\n     * **The server appends path parameters to the `signOutRedirectURL` and these path parameters\n     *  are required for this method to function.**\n     *\n     * @returns - `true` if successful, `false` otherwise.\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isSignOutSuccessful}\n     *\n     * @preserve\n     */\n    public static isSignOutSuccessful(signOutRedirectURL: string): boolean {\n        const url: URL = new URL(signOutRedirectURL);\n        const stateParam: string | null = url.searchParams.get(STATE);\n        const error: boolean = Boolean(url.searchParams.get(\"error\"));\n\n        return stateParam ? stateParam === SIGN_OUT_SUCCESS_PARAM && !error : false;\n    }\n\n    /**\n     * This method returns if the sign-out has failed or not.\n     *\n     * @param signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.\n     *\n     * **The server appends path parameters to the `signOutRedirectURL` and these path parameters\n     *  are required for this method to function.**\n     *\n     * @returns - `true` if successful, `false` otherwise.\n     *\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#didSignOutFail}\n     *\n     * @preserve\n     */\n    public static didSignOutFail(signOutRedirectURL: string): boolean {\n        const url: URL = new URL(signOutRedirectURL);\n        const stateParam: string | null = url.searchParams.get(STATE);\n        const error: boolean = Boolean(url.searchParams.get(\"error\"));\n\n        return stateParam ? stateParam === SIGN_OUT_SUCCESS_PARAM && error : false;\n    }\n\n    /**\n     * This method updates the configuration that was passed into the constructor when instantiating this class.\n     *\n     * @param config - A config object to update the SDK configurations with.\n     *\n     * @example\n     * ```\n     * const config = {\n     *     signInRedirectURL: \"http://localhost:3000/sign-in\",\n     *     clientID: \"client ID\",\n     *     baseUrl: \"https://localhost:9443\"\n     * }\n     *\n     * await auth.updateConfig(config);\n     * ```\n     * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#updateConfig}\n     *\n     * @preserve\n     */\n    public async updateConfig(config: Partial<AuthClientConfig<T>>): Promise<void> {\n        await this._authenticationCore.updateConfig(config);\n    }\n\n    public static async clearUserSessionData(userID?: string): Promise<void> {\n        await this._authenticationCore.clearUserSessionData(userID);\n    }\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","ResponseMode","exports","SERVICE_RESOURCES","AUTHORIZATION_ENDPOINT","TOKEN_ENDPOINT","REVOKE_TOKEN_ENDPOINT","END_SESSION_ENDPOINT","JWKS_ENDPOINT","OP_CONFIG_INITIATED","OIDC_SESSION_IFRAME_ENDPOINT","USERINFO_ENDPOINT","ISSUER","TOKEN_TAG","USERNAME_TAG","SCOPE_TAG","CLIENT_ID_TAG","CLIENT_SECRET_TAG","Stores","PKCE_CODE_VERIFIER","PKCE_SEPARATOR","SUPPORTED_SIGNATURE_ALGORITHMS","SESSION_STATE","SIGN_OUT_SUCCESS_PARAM","STATE","OIDC_SCOPE","FetchCredentialTypes","AsgardeoAuthException","constructor","code","name","message","this","Object","setPrototypeOf","prototype","AuthenticationUtils","static","payload","optionalizedPayload","assign","iss","aud","exp","iat","acr","amr","azp","auth_time","nonce","c_hash","at_hash","nbf","isk","sid","camelCasedPayload","entries","forEach","key","camelCasedKey","split","map","index","toUpperCase","slice","join","Accept","pkceKey","state","parseInt","stateParam","getTenantDomainFromIdTokenPayload","uidSeparator","tokens","sub","length","AuthenticationHelper","dataLayer","cryptoHelper","_dataLayer","_config","getConfigData","_oidcProviderMetaData","getOIDCProviderMetaData","_cryptoHelper","resolveEndpoints","response","oidcProviderMetaData","configData","endpoints","keys","endpointName","snakeCasedName","replace","letter","toLowerCase","resolveEndpointsExplicitly","requiredEndpoints","every","reqEndpointName","some","resolveEndpointsByBaseURL","baseUrl","defaultEndpoints","validateIdToken","idToken","jwksEndpoint","jwks_uri","trim","fetch","credentials","sendCookiesInRequests","Include","SameOrigin","error","status","ok","statusText","json","issuer","jwk","getJWKForTheIdToken","isValidIdToken","clientID","decodeIDToken","clockTolerance","_a","validateIDTokenIssuer","getAuthenticatedUserInfo","tenantDomain","username","givenName","_b","given_name","familyName","_c","family_name","fullName","displayName","_d","preferred_username","filterClaimsFromIDTokenPayload","replaceCustomGrantTemplateTags","text","userID","scope","sessionData","getSessionData","includes","push","access_token","id_token","clientSecret","clearUserSessionData","removeTemporaryData","removeSessionData","handleTokenResponse","parsedResponse","created_at","Date","getTime","validateIDToken","setSessionData","tokenResponse","accessToken","createdAt","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","generatePKCEKey","tempData","getTemporaryData","startsWith","lastKey","sort","pop","CryptoHelper","cryptoUtils","_cryptoUtils","getCodeVerifier","base64URLEncode","generateRandomBytes","getCodeChallenge","verifier","hashSha256","jwtHeader","headerJSON","JSON","parse","base64URLDecode","kid","validateJwtIssuer","verifyJwt","utf8String","AuthenticationCore","_authenticationHelper","getAuthorizationURLParams","config","authorizeRequestParams","Map","set","signInRedirectURL","responseMode","enablePKCE","codeVerifier","codeChallenge","setTemporaryDataParameter","prompt","customParams","toString","generateStateParamForRequestCorrelation","getAuthorizationURL","authorizeEndpoint","getOIDCProviderMetaDataParameter","authorizeRequest","URL","searchParams","append","requestAccessToken","authorizationCode","sessionState","tokenEndpoint","token_endpoint","setSessionDataParameter","body","URLSearchParams","getTemporaryDataParameter","extractPKCEKeyFromStateParam","removeTemporaryDataParameter","headers","Headers","getTokenRequestHeaders","method","refreshAccessToken","revokeAccessToken","revokeTokenEndpoint","revocation_endpoint","requestCustomGrant","customGrantParams","oidcProviderMetadata","data","all","newValue","requestHeaders","attachToken","Authorization","requestConfig","returnsSession","getBasicUserInfo","authenticatedUser","basicUserInfo","allowedScopes","session_state","undefined","getDecodedIDToken","getCryptoHelper","getIDToken","forceInit","wellKnownEndpoint","Error","setOIDCProviderMetaData","getOIDCServiceEndpoints","authorizationEndpoint","authorization_endpoint","checkSessionIframe","check_session_iframe","endSessionEndpoint","end_session_endpoint","introspectionEndpoint","introspection_endpoint","_e","jwksUri","_f","registrationEndpoint","_g","registration_endpoint","revocationEndpoint","_h","_j","userinfoEndpoint","_k","userinfo_endpoint","getSignOutURL","logoutEndpoint","callbackURL","signOutRedirectURL","queryParams","sendIdTokenInLogoutRequest","getAccessToken","getCreatedAt","getExpiresIn","isAuthenticated","isAccessTokenAvailable","Boolean","expiresInString","currentTime","getPKCECode","setPKCECode","pkce","updateConfig","setConfigData","ASGARDEO_SESSION_ACTIVE","DataLayer","instanceID","store","_id","_store","setDataInBulk","existingDataJSON","getData","existingData","dataToBeSaved","dataToBeSavedJSON","stringify","setData","setValue","attribute","removeValue","_resolveKey","isLocalStorageAvailable","testValue","localStorage","setItem","removeItem","ConfigData","OIDCProviderMetaData","setTemporaryData","temporaryData","TemporaryData","SessionData","setCustomData","customData","getCustomData","setSessionStatus","getSessionStatus","getItem","removeSessionStatus","removeConfigData","removeData","removeOIDCProviderMetaData","getConfigDataParameter","getSessionDataParameter","setConfigDataParameter","setOIDCProviderMetaDataParameter","removeConfigDataParameter","removeOIDCProviderMetaDataParameter","removeSessionDataParameter","DefaultConfig","query","AsgardeoAuthClient","initialize","clientId","_instanceID","_authenticationCore","filter","getDataLayer","getInstanceID","authRequestConfig","url","get"],"mappings":"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"}